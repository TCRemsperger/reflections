VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

What happens when you initialize a repository? Why do you need to do it?

INITIALIZING A REPOSITORY CREATES A (HIDDEN) SUBDIRECTORY .git IN WHICH TO STORE THE LOG DATA (WHICH CONTAINS INFO ON THE VARIOUS COMMITS)


VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

How is the staging area different from the working directory and the repository? What value do you think it offers?

STAGING AREA DIFFERS FROM WORKING DIRECTORY IN THAT IT CAN BE COMMITTED TO THE REPOSITORY. THE REPOSITORY STORES COMMITTED FILES AND LOGS THEM.

THE VALUE OF STAGING AREA IS THAT IT LETS THE USER MAKE RELATED CHANGES TO FILES, TO ADD THEM TO THE STAGING AREA, AND THEN FINALLY TO COMMIT THEM TOGETHER AS ONE COMMIT (WHICH IS GOOD, SINCE THESE ARE RELATED CHANGES - IE ONE LOGICAL CONCEPT)

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

How can you use the staging area to make sure you have one commit per logical change?

THE STAGING AREA CAN BE USED TO AGGREGATE ALL COMPONENTS TO FORM ONE LOGICAL CHANGE. THERE - TO VERIFY THAT INDEED
ONLY ONE LOGICAL CHANGE WAS MADE - ONE CAN PROCEED WITH USING 
git diff  (which finds diff between Working Directory and Staging Area)

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

BRANCHES WOULD BE VERY USEFUL FOR MAKING SOFTWARE THAT MUST COMPLY IN DIFFERENT STATES WITH DIFFERENT
LAWS. OR EVEN RUNNING ON DIFFERENT PLATFORMS, WHERE MUCH OF THE CODE IS THE SAME BUT
AT SOME POINT THE CODE MUST DIFFER FOR DIFFERENT HARDWARE.

DIFFERENT BRANCHES FOR:
- PRODUCTION
- DEVELOPMENT 
- EXPERIMENTAL
- UNIQUE FEATURES
- EVEN TO BREAK UP BOREDOM (SO CAN STOP WORKING ON A FEATURE, AND DO SOMETHING ELSE)
- ANYTIME HE DOES SOMETHING DIFFERENT (CONTEXT SWITCHING)

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

How do the diagrams help you visualize the branch structure?

THE DIAGRAM IS A DIRECTED GRAPH, AND SHOWS BRANCHES AND TIPS, AND IS SO MUCH SIMPLER TO
UNDERSTAND THAN COMMIT IDS.

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?

BY MERGING 2 BRANCHES TOGETHER WE TAKE 2 TIPS AND FORM 1 TIP.

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

AUTOMATIC MERGING MAY INCLUDE CHANGES THAT ONE PROGRAMMER MADE THAT ARE JUST WRONG. MANUALLY DOING MERGES
ALLOWS THE AUTHORS TO REVIEW AND MAKE CERTAIN ONLY DESIRED CHANGES ARE INCLUDED. HOWEVER, IF BOTH
PROGRAMMERS ARE EXCELLENT AND ARE WARY TO NOT INTERFERE WITH EACH OTHER'S CODE, AUTOMATIC MERGING CAN 
BE FAR MORE EFFICIENT.

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
